% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/old_taxa--taxmap--docs.R
\name{mutate_obs}
\alias{mutate_obs}
\title{Add columns to [taxmap()] objects}
\arguments{
\item{obj}{An object of type [taxmap()]}

\item{data}{Dataset name, index, or a logical vector that indicates which dataset in
`obj$data` to add columns to.}

\item{...}{One or more named columns to add. Newly created columns can be
referenced in the same function call. Any variable name that appears in
[all_names()] can be used as if it was a vector on its own.}

\item{target}{DEPRECIATED. use "data" instead.}
}
\value{
An object of type [taxmap()]
}
\description{
Add columns to tables in `obj$data` in [taxmap()] objects.  See
[dplyr::mutate()] for the inspiration for this function and more information.
Calling the function using the `obj$mutate_obs(...)` style edits "obj" in
place, unlike most R functions. However, calling the function using the
`mutate_obs(obj, ...)` imitates R's traditional copy-on-modify semantics, so
"obj" would not be changed; instead a changed version would be returned, like
most R functions.
\preformatted{
obj$mutate_obs(data, ...)
mutate_obs(obj, data, ...)}
}
\examples{

# Add column to existing tables
mutate_obs(ex_taxmap, "info",
           new_col = "Im new",
           newer_col = paste0(new_col, "er!"))

# Create columns in a new table
mutate_obs(ex_taxmap, "new_table",
           nums = 1:10,
           squared = nums ^ 2)

# Add a new vector
mutate_obs(ex_taxmap, "new_vector", 1:10)

# Add a new list
mutate_obs(ex_taxmap, "new_list", list(1, 2))

}
\seealso{
Other taxmap manipulation functions: 
\code{\link{arrange_obs}()},
\code{\link{arrange_taxa}()},
\code{\link{filter_obs}()},
\code{\link{filter_taxa}()},
\code{\link{sample_frac_obs}()},
\code{\link{sample_frac_taxa}()},
\code{\link{sample_n_obs}()},
\code{\link{sample_n_taxa}()},
\code{\link{select_obs}()},
\code{\link{transmute_obs}()}
}
\concept{taxmap manipulation functions}
